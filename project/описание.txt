-- Описание БД:

-- Данная БД частично реализует логику сайта kinopoisk.ru. Сайт предоставляет услуги поиска
-- и просмотра информации о фильмах и их создателях (актерах, режиссерах, продюссерах и т.д.),
-- а так же о кино наградах. Помимо этого существует возможность завести пользовательскую учетную запись
-- для составления своего собственного списка понравившихся фильмов и людей, участвующих в кинопроизводстве.

_______________________________________________________________________________________________________________


CREATE DATABASE kinopoisk;

USE kinopoisk;

-- Таблицы БД
DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  firstname VARCHAR(100) NOT NULL,
  lastname VARCHAR(100) NOT NULL,
  gender_id INT UNSIGNED DEFAULT NULL,
  birthday DATE DEFAULT NULL,
  phone VARCHAR(13) NOT NULL UNIQUE,
  email VARCHAR(120) NOT NULL UNIQUE,
  country_id INT UNSIGNED DEFAULT NULL,
  city VARCHAR(100) DEFAULT NULL,
  photo_id INT UNSIGNED DEFAULT NULL,
  vk_link VARCHAR(255) DEFAULT NULL,
  fb_link VARCHAR(255) DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'пользователи';


DROP TABLE IF EXISTS films;
CREATE TABLE films (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  photo_id INT UNSIGNED DEFAULT NULL,
  `year` YEAR NOT NULL COMMENT 'год выпуска фильма',
  release_date DATE NOT NULL COMMENT 'дата выхода в прокат',
  age_restr_id INT UNSIGNED NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'фильмы';

DROP TABLE IF EXISTS films_genres;
CREATE TABLE films_genres (
  film_id INT UNSIGNED NOT NULL,
  genre_id INT UNSIGNED NOT NULL,
  PRIMARY KEY (film_id, genre_id)
);

DROP TABLE IF EXISTS genres;
CREATE TABLE genres (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(150) NOT NULL UNIQUE
) COMMENT = 'название жанра фильма';

DROP TABLE IF EXISTS countries;
CREATE TABLE counties (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE
) COMMENT = 'страны';

DROP TABLE IF EXISTS age_restriction;
CREATE TABLE age_restriction (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(3) NOT NULL UNIQUE
) COMMENT = 'возрастной рейтинг фильма';

DROP TABLE IF EXISTS film_makers;
CREATE TABLE film_makers (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  firstname VARCHAR(255) NOT NULL,
  lastname VARCHAR(255) DEFAULT NULL,
  gender_id INT UNSIGNED DEFAULT NULL,
  photo_id INT UNSIGNED DEFAULT NULL,
  birthday DATE DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'создатели фильмов (режиссеры, сценаристы, актеры и т.д.';

DROP TABLE IF EXISTS gender;
CREATE TABLE gender (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name CHAR(1) NOT NULL UNIQUE
) COMMENT = 'пол человека';

DROP TABLE IF EXISTS roles;
CREATE TABLE roles (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
) COMMENT = 'профессия человека в киноиндустрии';

DROP TABLE IF EXISTS films_film_makers;
CREATE TABLE films_film_makers (
  film_id INT UNSIGNED NOT NULL,
  film_maker_id INT UNSIGNED NOT NULL,
  role_id INT UNSIGNED NOT NULL,
  nomination_id INT UNSIGNED DEFAULT NULL UNIQUE COMMENT 'номинация',
  is_won TINYINT(1) DEFAULT NULL COMMENT '1 - выиграл, 0 - номинирован',
PRIMARY KEY(film_id, film_maker_id, role_id)
);

DROP TABLE IF EXISTS media;
CREATE TABLE media (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  media_type_id INT UNSIGNED NOT NULL,
  user_type_id INT UNSIGNED NOT NULL COMMENT 'тип владельца медиафайла',
  file_path VARCHAR(255) NOT NULL,
  metadata JSON DEFAULT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'спиок всех медиаданных';

DROP TABLE IF EXISTS media_types;
CREATE TABLE media_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE
) COMMENT = 'типы медиаданных';

DROP TABLE IF EXISTS user_types;
CREATE TABLE user_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
) COMMENT = 'типы медиаданных';

DROP TABLE IF EXISTS nominations;
CREATE TABLE nominations (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  award_id INT UNSIGNED NOT NULL COMMENT 'ссылка на название премии',
  `year` YEAR NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'номинации';

DROP TABLE IF EXISTS awards;
CREATE TABLE awards (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE
) COMMENT = 'название награды';


DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL COMMENT 'кто поставил лайк из пользователей',
  target_id INT UNSIGNED NOT NULL COMMENT 'целевой id фильма или человека из индустрии',
  target_type_id INT UNSIGNED NOT NULL COMMENT 'ссылка на user_types, не может быть пользователем',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
) COMMENT = 'лайки фильмам и работникам киноиндустрии';

DROP TABLE IF EXISTS films_countries;
CREATE TABLE films_countries (
  film_id INT UNSIGNED NOT NULL,
  country_id INT UNSIGNED NOT NULL,
  PRIMARY KEY (film_id, country_id)
);

_______________________________________________________________________________________________________________

-- Внешние ключи
ALTER TABLE users
  ADD CONSTRAINT users_gender_id_fk 
    FOREIGN KEY (gender_id) REFERENCES gender(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT users_country_id_fk
    FOREIGN KEY (country_id) REFERENCES countries(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT users_photo_id_fk
   FOREIGN KEY (photo_id) REFERENCES media(id) 
     ON DELETE SET NULL;
  
ALTER TABLE films
  ADD CONSTRAINT films_photo_id_fk 
    FOREIGN KEY (photo_id) REFERENCES media(id)
      ON DELETE SET NULL,
  ADD CONSTRAINT films_age_restr_id_fk
    FOREIGN KEY (age_restr_id) REFERENCES age_restriction(id)
      ON DELETE CASCADE;
     
ALTER TABLE films_countries
  ADD CONSTRAINT films_countries_film_id_fk 
    FOREIGN KEY (film_id) REFERENCES films(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT films_countries_country_id_fk
    FOREIGN KEY (country_id) REFERENCES countries(id)
      ON DELETE CASCADE;

ALTER TABLE films_genres
  ADD CONSTRAINT films_genres_film_id_fk 
    FOREIGN KEY (film_id) REFERENCES films(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT films_genres_genre_id_fk
    FOREIGN KEY (genre_id) REFERENCES genres(id)
      ON DELETE CASCADE;
     
ALTER TABLE likes
  ADD CONSTRAINT likes_user_id_fk
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT likes_target_type_id_fk
    FOREIGN KEY (target_type_id) REFERENCES user_types(id)
      ON DELETE CASCADE;
     
ALTER TABLE media
  ADD CONSTRAINT media_media_type_id_fk
    FOREIGN KEY (media_type_id) REFERENCES media_types(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT media_user_type_id_fk
    FOREIGN KEY (user_type_id) REFERENCES user_types(id)
      ON DELETE CASCADE;
     
ALTER TABLE film_makers
  ADD CONSTRAINT film_makers_gender_id_fk 
    FOREIGN KEY (gender_id) REFERENCES gender(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT film_makers_photo_id_fk
    FOREIGN KEY (photo_id) REFERENCES media(id)
      ON DELETE SET NULL;
     
ALTER TABLE films_film_makers
  ADD CONSTRAINT films_film_makers_film_id_fk
    FOREIGN KEY (film_id) REFERENCES films(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT films_film_makers_film_maker_id_fk
    FOREIGN KEY (film_maker_id) REFERENCES film_makers(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT films_film_makers_role_id_fk
    FOREIGN KEY (role_id) REFERENCES roles(id)
      ON DELETE CASCADE,
  ADD CONSTRAINT films_film_makers_nomination_id_fk
    FOREIGN KEY (nomination_id) REFERENCES nominations(id)
      ON DELETE CASCADE;
  
ALTER TABLE nominations
  ADD CONSTRAINT nominations_award_id_fk
    FOREIGN KEY (award_id) REFERENCES awards(id)
      ON DELETE CASCADE;
     
_______________________________________________________________________________________________________________
  
-- Индексы
CREATE INDEX film_makers_firstname_idx ON film_makers(firstname);
CREATE INDEX film_makers_lastname_idx ON film_makers(lastname);
CREATE INDEX films_idx ON films(name);
CREATE INDEX films_release_date_idx ON films(release_date);

_______________________________________________________________________________________________________________

-- Представленния
-- 1. Упорядоченный список фильмов и актеров из этих фильмов
CREATE VIEW movies_actors (movies, actors) AS 
  SELECT f.name AS movie, CONCAT (fm.firstname, ' ', fm.lastname) AS name 
    FROM films f 
      JOIN films_film_makers ffm 
        ON f.id = ffm.film_id 
      JOIN film_makers fm 
        ON ffm.film_maker_id = fm.id 
      JOIN roles r
        ON ffm.role_id = r.id 
    WHERE r.id = 7 
    ORDER BY movie;
   
 
-- 2. Упорядоченный (по имени и году выхода) список всех наград и номинаций
CREATE VIEW awards_nominations (awards, nominations, year) AS 
  SELECT a.name, n.name, n.year 
   FROM awards a
     JOIN nominations n
       ON a.id = n.award_id
   ORDER BY a.name, n.year;
  
_______________________________________________________________________________________________________________
  
-- Триггеры
-- 1. Триггеры не позволяет добавить (вставить или обновить двееые)
-- в таблицу likes в поле target_type_id
-- значение равное 3 (соответствует 'user' в таблице user_types), т.к.
-- лайк может быть поставлен только фильму(1) и кинопроизводителю(2)

DELIMITER -   
  
DROP TRIGGER IF EXISTS check_target_type_id_likes_insert-  

CREATE TRIGGER check_target_type_id_likes_insert BEFORE INSERT ON likes
  FOR EACH ROW
  BEGIN
	  IF NEW.target_type_id >= 3 THEN
	    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Operation is not acceptable:value must to be 1 or 2';
	  END IF;
  END-

DELIMITER ;


DELIMITER -   
  
DROP TRIGGER IF EXISTS check_target_type_id_likes_update-  

CREATE TRIGGER check_target_type_id_likes_update BEFORE UPDATE ON likes
  FOR EACH ROW
  BEGIN
	  IF NEW.target_type_id >= 3 THEN
	    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Operation is not acceptable:value must to be 1 or 2';
	  END IF;
  END-

DELIMITER ;

-- 2. Ограничение на таблицу films: нельзя добавить год выхода фильма был бльше, чем дата релиза фильма.
-- Триггеры на добавление или обновление данных.

DELIMITER -   
  
DROP TRIGGER IF EXISTS check_year_release_date_films_insert-  

CREATE TRIGGER check_year_release_date_films_insert BEFORE INSERT ON films
  FOR EACH ROW
  BEGIN
	  IF NEW.`year` > YEAR(NEW.release_date) THEN
	    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'the year cannot be greater than the release date';
	  END IF;
  END-

DELIMITER ;


DELIMITER -   
  
DROP TRIGGER IF EXISTS check_year_release_date_films_update-  

CREATE TRIGGER check_year_release_date_films_update BEFORE UPDATE ON films
  FOR EACH ROW
  BEGIN
	  IF NEW.`year` > YEAR(NEW.release_date) THEN
	    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'the year cannot be greater than the release date';
	  END IF;
  END-

DELIMITER ;

_______________________________________________________________________________________________________________

-- Процедуры
-- 1. Выводит список всех создателей фильмов с их основными фотографиями (если они есть).
DELIMITER -

DROP PROCEDURE IF EXISTS photo_check-
CREATE PROCEDURE photo_check ()
  BEGIN
    SELECT CONCAT(fm.firstname, ' ', fm.lastname) as name, m.file_path 
      FROM film_makers fm
        LEFT JOIN media m
          ON fm.photo_id = m.id;
  END-
  
DELIMITER ;

CALL photo_check ();

-- 2. Выводит подсчет фильмов в заданном жанре. В процедуру передается 
-- id жанра.

DELIMITER -

DROP PROCEDURE IF EXISTS film_genre_count-
CREATE PROCEDURE film_genre_count (IN value INT)
  BEGIN
    SELECT COUNT(*) AS films_amount 
      FROM films f 
       JOIN films_genres fg 
         ON f.id = fg.film_id 
       JOIN genres g 
         ON fg.genre_id = g.id 
    WHERE g.id = value; 	
  END-
  
DELIMITER ;

CALL film_genre_count (11);

_______________________________________________________________________________________________________________

-- Скрипты характерных выборок
-- 1. Количество фильмов по годам
SELECT year, COUNT(f.id) AS number_of_films 
  FROM films f
    GROUP BY year
      ORDER BY year;
  
-- 2. 10 самых возрастных актеров
SELECT CONCAT(firstname, ' ', lastname) as name, birthday 
  FROM film_makers fm
    JOIN films_film_makers ffm 
      ON fm.id = ffm.film_maker_id
    JOIN roles r
      ON ffm.role_id = r.id
  WHERE r.name = 'actor'
  ORDER BY fm.birthday 
  LIMIT 10;
  

 -- 3. Фильм с наибольшми количеством лайков, снятый определенным режиссером.
SELECT target_id, COUNT(*) AS likes
  FROM likes 
    WHERE target_type_id = 2 AND target_id IN (
      SELECT f.id
		FROM films f 
      JOIN films_film_makers ffm 
        ON f.id = ffm.film_id 
      JOIN film_makers fm 
        ON ffm.film_maker_id = fm.id 
      JOIN roles r
        ON ffm.role_id = r.id 
 	 WHERE ffm.role_id = 3 AND fm.id = 149)
    GROUP BY target_id ORDER BY likes DESC LIMIT 1;
   
   