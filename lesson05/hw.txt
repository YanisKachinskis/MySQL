Практическое задание по теме “Операторы, фильтрация, сортировка и ограничение”
1. Пусть в таблице users поля created_at и updated_at оказались незаполненными. 
Заполните их текущими датой и временем.
2. Таблица users была неудачно спроектирована. Записи created_at и updated_at 
были заданы типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10". 
Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения.
3. таблице складских запасов storehouses_products в поле value могут встречаться самые 
разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. 
Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения 
значения value. Однако, нулевые запасы должны выводиться в конце, после всех записей.
4. (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и 
мае. Месяцы заданы в виде списка английских названий ('may', 'august')
5. (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. 
SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, 
заданном в списке IN.

Практическое задание теме “Агрегация данных”
1. Подсчитайте средний возраст пользователей в таблице users
2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. 
Следует учесть, что необходимы дни недели текущего года, а не года рождения.
3.(по желанию) Подсчитайте произведение чисел в столбце таблицы
______________________________________________________________________________________________
Практическое задание по теме “Операторы, фильтрация, сортировка и ограничение”
1. 
UPDATE users SET created_at = NOW(), updated_at = NOW();

2.
UPDATE users SET created_at = STR_TO_DATE(created_at, '%d.%m.%Y %H:%i'), 
updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %H:%i');

ALTER TABLE users 
  MODIFY created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  MODIFY updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

3.
SELECT * FROM storehouses_products ORDER BY IF(value > 0, 'a', 'b'), value;
Функцией IF помечаем нулевые значения, как 'a', а ненулевые как 'b'

4.
SELECT name, DATE_FORMAT(birthday_at, '%M') as birthmonth FROM users WHERE MONTH(birthday_at) = 5 OR MONTH(birthday_at) = 8;

5.
SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIELD (id, 5, 1, 2);

____________________________________________________________________________________________________
Практическое задание теме “Агрегация данных”
1.
SELECT ROUND(AVG(YEAR(NOW()) - YEAR(birthday_at))) as average FROM users;
Вычисляем разницу в годах от года рождения до текущего, вычисляем среднее и округляем

2.
SELECT GROUP_CONCAT(name), WEEKDAY(CONCAT('2020', SUBSTRING(birthday_at, 5, 10))) + 1 as weekday FROM users GROUP BY weekday;
Наглядный вывод по именам, у кого день рождения в какой день недели.

SELECT COUNT(name), WEEKDAY(CONCAT('2020', SUBSTRING(birthday_at, 5, 10))) + 1 as weekday FROM users GROUP BY weekday;
Это количество дней рождения в 2020 году в определенный день недели.

3.
SELECT EXP(SUM(LN(id))) FROM users;
например, по полю id